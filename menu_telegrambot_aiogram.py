from aiogram.utils import executor

import logging
from aiogram import Bot, Dispatcher, types, executor


from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import os

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, callback_query

# –û–±—ä–µ–∫—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
from aiogram.types import BotCommand, BotCommandScopeChat


TOKEN = "your token"
logging.basicConfig(level=logging.INFO)


# –ø—Ä–æ–∫—Å–∏	
proxy_url = "http://proxy.server:3128"


bot = Bot(token=TOKEN, proxy=proxy_url)
dp = Dispatcher(bot)


# –§—É–Ω–∫—Ü–∏—è (–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞)
async def on_startup(dp):
	await bot.send_message(your id, "–Ø –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")

# –§—É–Ω–∫—Ü–∏—è (–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞)
async def on_shutdown(dp):
	await bot.send_message(your id, "–Ø –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")



# –ú–µ–Ω—é—à–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_starting_commands(bot: Bot, chat_id: int):
    STARTING_COMMANDS = {
		"ru": [
			BotCommand("start", "–ö–æ–º–∞–Ω–¥–∞ start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"), # /start
			BotCommand("help", "–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –±–æ—Ç—É"), # /help
			BotCommand("id", "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π id"), # /id
			BotCommand("echo", "–≠—Ö–æ"), # /echo
			BotCommand("games", "–£–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –µ—Å—Ç—å –∏–≥—Ä—ã"), # /games
		],
		"en": [
			BotCommand("start", "Restart bot"), # /start
			BotCommand("help", "Info about bot"), # /help
			BotCommand("id", "Find your id"), # /id
			BotCommand("echo", "Echo"), # /echo
			BotCommand("games", "Find out what games are available"), # /games
		]
	}
    for language, commands in STARTING_COMMANDS.items():
	    await bot.set_my_commands(
		    commands=commands,
		    scope=BotCommandScopeChat(chat_id),
		    language_code=language
		)


# /start
# 1 –º–µ–Ω—é –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@dp.message_handler(commands="start")
async def command_start(message: types.Message):
    await bot.send_photo(message.from_user.id, photo=menu_one, caption="üá∫üá∏ / üá∑üá∫", reply_markup=mainMenu_en_rus)
    await set_starting_commands(bot, message.from_user.id)


# /help
@dp.message_handler(commands="help")
async def command_help(message: types.Message):
    if message.from_user.language_code == "ru":
	    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à Youtube, Discord –∏ —Ç.–¥.üò≤")

    elif message.from_user.language_code == "en":
	    await message.answer("You can use me for download games, see our Youtube, Discord etc.üò≤")


# /id
@dp.message_handler(commands="id")
async def command_id(message: types.Message):
    if message.from_user.language_code == "ru":
        await message.answer(f"–í–∞—à id: {message.from_user.id}")

    elif message.from_user.language_code == "en":
	    await message.answer(f"Your id: {message.from_user.id}")


# /echo
@dp.message_handler(commands="echo")
async def command_echo(message: types.Message):
    if message.from_user.language_code == "ru":
        await message.answer("–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞\n1. –°–º–∞–π–ª–∏–∫\n2. –≠–º–æ–¥–∂–∏\n3. Gif\n4. –í–∏–¥–µ–æ\n4. –§–æ—Ç–æ\n5. –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç")

    elif message.from_user.language_code == "en":
        await message.answer("If you send something from this list\n1. Smiley face\n2. Emoji\n3. Gif\n4. Video\n4. Picture\n5. Voice message\n\nBot will send it back to you")


# /games
@dp.message_handler(commands="games")
async def command_games(message: types.Message):
    if message.from_user.language_code == "ru":
        await message.answer("ANDROID\n1. Cars\n2. Mosaic\n\nPC\n1. Horror\n2. ES MOD\n\nWEB GAMES\n–ü–æ–∫–∞ –Ω–µ—Ç")

    elif message.from_user.language_code == "en":
        await message.answer("ANDROID\n1. Cars\n2. Mosaic\n\nPC\n1. Horror\n2. ES MOD\n\nWEB GAMES\nNot yet")



# Register dispather
def register_handlers_client(dp : Dispatcher):
  dp.register_message_handler(command_start, commands=["start"])

if __name__ == "__main__":
	executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)